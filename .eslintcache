[{"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/reportWebVitals.js":"1","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/index.js":"2","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/App.js":"3","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/NavBar.js":"4","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Home.js":"5","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/Home.js":"6","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/NFAmin.js":"7","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/DFAmin.js":"8","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Form.js":"9","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Graph.js":"10","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Chart.js":"11","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/NFA.js":"12","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/DFA.js":"13","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/GraphLoader.js":"14"},{"size":362,"mtime":1606884013489,"results":"15","hashOfConfig":"16"},{"size":500,"mtime":1606884013489,"results":"17","hashOfConfig":"16"},{"size":1162,"mtime":1607645040305,"results":"18","hashOfConfig":"16"},{"size":934,"mtime":1607641166992,"results":"19","hashOfConfig":"16"},{"size":347,"mtime":1607131826451,"results":"20","hashOfConfig":"16"},{"size":997,"mtime":1607641121523,"results":"21","hashOfConfig":"16"},{"size":165,"mtime":1607131360751,"results":"22","hashOfConfig":"16"},{"size":14919,"mtime":1608277567850,"results":"23","hashOfConfig":"16"},{"size":1602,"mtime":1607321986385,"results":"24","hashOfConfig":"16"},{"size":2348,"mtime":1607495417221,"results":"25","hashOfConfig":"16"},{"size":1963,"mtime":1607312258500,"results":"26","hashOfConfig":"16"},{"size":16086,"mtime":1607495359085,"results":"27","hashOfConfig":"16"},{"size":17470,"mtime":1607640578053,"results":"28","hashOfConfig":"16"},{"size":640,"mtime":1607465530053,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"fu53a0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/reportWebVitals.js",[],["63","64"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/index.js",[],["65","66"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/App.js",[],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/NavBar.js",[],["67","68"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Home.js",[],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/Home.js",["69","70","71","72","73"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/NFAmin.js",[],["74","75"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/DFAmin.js",[],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Form.js",[],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Graph.js",["76"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Chart.js",[],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/NFA.js",["77","78"],"/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/Pages/DFA.js",["79","80"],"import React, { useState } from \"react\";\nimport \"../../App.css\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport { Sigma, EdgeShapes, NodeShapes} from 'react-sigma';\nimport { DragNodes } from 'react-sigma';\n\n\nfunction DFA() {\n    // graph is in the format \n    // { source id / name: [λ transition targets[], 0 transition target, 1 transition target], }\n    // let graph = {};\n    // are in the form [ {name: boolean if accept}]\n    // let nodes = [];let temp = [[], [], []];\n    // edges are in the form [{source:[target, transition]}]\n    // let edges = [];\n\n    const transitionIndex = { \"0\": 0, \"1\": 1 };\n\n    const [graph, setGraph] = useState({});\n\n    const [startState, setStartState] = useState({state:\"\"});\n\n    const [nodes, setNodes] = useState([]);\n\n    const [edges, setEdges] = useState([]);\n\n    const [transition, setTransition] = useState(\"0\");\n    const [source, setSource] = useState(\"\");\n    const [target, setTarget] = useState(\"\");\n    const [warning, setWarning] = useState(\"\");\n    const [show, setShow] = useState(false);\n    const [acceptStates, setAcceptStates] = useState([]);\n\n    let default_data = {};\n    let hidden_node = { id: \"hidden\", color: \"red\", size: 25, x: -0.2, y: -0.2 };\n    default_data.nodes = [];\n    default_data.edges = [];\n    default_data.nodes.push(hidden_node);\n\n    const [data, setData] = useState(default_data);\n\n    const handleClose = () => {\n        setShow(false);\n        setWarning(\"\");\n    };\n\n    const handleStartState = (id) => {\n        let newState = { state: id };\n        setStartState({...newState});\n    }\n\n    const handleAcceptState = (id) => {\n        let newAccepts = acceptStates;\n        let index = newAccepts.indexOf(id);\n        for (let node of nodes) {\n            if (typeof node[id] === \"boolean\" ) {\n                node[id] = !node[id];\n                if (index > -1) {\n                    newAccepts.splice(index, 1);\n                } else {\n                    newAccepts.push(id);\n                }\n                setAcceptStates([...newAccepts]);\n                break;\n            }\n        }\n\n    }\n\n    const handleGenerateData = () => {\n        let tempData = { ...default_data };\n        let interNode, interEdge;\n        // interNode = { id: \"hidden\", color: \"red\", size: 25};\n        let x = 0, y = 1;\n        let edgeId = \"e\";\n        let count = 0;\n\n        // source id / name: [λ transition targets[], 0 transition target, 1 transition target],]]\n\n        console.log(\"g: \",graph)\n\n        // for (const [src, transitionMap] of Object.entries(graph)) {\n        //     console.log(`${src}: ${transitionMap}`);\n        //     console.log(\"we made it\")\n        //     interNode = {}\n        //     interNode.id = src;\n        //     // interNode.label = src;\n        //     // if (src === startState.state) {\n        //     //     interNode.size = 25;\n        //     //     interNode.type = \"diamond\"\n        //     //     interNode.color = \"#45adc1\"\n        //     // } else {\n        //     //     interNode.size = 20;\n        //     //     interNode.color = \"black\"\n        //     // }\n        //     interNode.x = x;\n        //     interNode.y = y;\n        //     tempData.nodes.push(interNode);\n        //     x++;\n        //     y++;\n        //   }\n\n        nodes.forEach((node) => {\n            interNode = {}\n            interNode.id = Object.keys(node).join(\"\");\n            interNode.label = interNode.id;\n            if (node[interNode.id]) {\n                interNode.size = 25;\n                interNode.type = \"diamond\"\n                interNode.color = \"#45adc1\"\n            } else {\n                interNode.size = 20;\n                interNode.color = \"black\"\n            }\n            interNode.x = x;\n            interNode.y = y;\n            tempData.nodes.push(interNode);\n            x++;\n            y++;\n        });\n        edges.forEach((edge) => {\n            for (let src in edge) {\n                interEdge = {};\n                interEdge.id = edgeId + count;\n                interEdge.source = src;\n                interEdge.target = edge[src][0];\n                interEdge.label = edge[src][1];\n                interEdge.color = \"grey\";\n                tempData.edges.push(interEdge); \n                if (src === startState) {\n                    interEdge = {};\n                    interEdge.id = \"start\";\n                    interEdge.source = \"hidden\";\n                    interEdge.target = src;\n                    interEdge.color = \"grey\";\n                    interEdge.type = \"arrow\"\n                    tempData.edges.push(interEdge); \n                }\n                count++;\n            }\n        })\n\n\n        console.log(data)\n    \n\n\n\n\n        setData({ ...tempData })\n\n    }\n\n    const handleRemoveState = (id) => {\n        let rubbish = [];\n        let trash = [];\n        let newNodes = nodes.filter(node => node[id] === undefined);\n        setNodes([...newNodes]);\n\n        let newEdges = edges.filter(edge => edge[id] === undefined);\n        for (let edge of newEdges) {\n            // Only one key so it doesnt actually loop\n            for (let key in edge) {\n                if (edge[key][0] === id) {\n                    trash.push(edge)\n                }\n            }\n        }\n        newEdges.filter(edge => !trash.includes(edge));\n        setEdges([...newEdges]);\n\n        let newGraph = graph;\n        for (let entry of Object.entries(newGraph)) {\n            if (entry[0] === id) {\n                rubbish.push(entry)\n            } else {\n                for (let trans of entry[1]) {\n                    trans = trans.filter(n => n!==id )\n                }\n            }\n        }\n        setGraph({...newGraph})\n    }\n\n    const sameArray = (a1, a2) => {\n\n        if (a1 === undefined || !Array.isArray(a1) || !Array.isArray(a2) || a1.length !== a2.length) {\n            return false\n        } \n        for (let i = 0; i < a2.length; i++) {\n            if (a1[i] !== a2[i]) {\n                return false\n            }\n        }\n        return true;\n    }\n\n    const sameObject = (o1, o2) => {\n        if (o1 !== undefined&& o2 !== undefined && o1.size === o2.size) {\n            for (let key in o1) {\n                if (o1[key] !== o2[key]) {\n                    return false;\n                }\n            }\n        } else {\n            return false\n        }\n        return true\n    }\n\n\n    const objectInList = (list, object) => {\n        let broke = false;\n        for (const inside of list) {\n            if (inside.size === object.size) {\n                for (let key in object) {\n                    if (Array.isArray(object[key]) && sameArray(inside[key], object[key])){\n                        broke = true;\n                        break;\n                    } else if (typeof object[key] === \"object\" && sameObject(object[key], inside[key])) {\n                        broke = true;\n                        break;\n                    } else if (object[key] === inside[key]) {\n                        broke = true;\n                        break;\n                    } else if (typeof object[key] === \"boolean\" && typeof inside[key] === \"boolean\") {\n                        broke = true;\n                        break;\n                    }\n                }\n                if (broke) {\n                    return true;\n                }\n                \n            }\n        }\n        return false;\n    }\n    const handleShow = () => setShow(true);\n\n    const handleUpdateGraph = (n, e) => {\n        let tempGraph = {}\n        let temp;\n        let applicableEdges;\n        for (let node of n) {\n            // this does not loop. There is only one key\n            for (let name in node) {\n                temp = [[], [], []];\n                tempGraph[name] = temp;\n                applicableEdges = e.filter(edg => edg[name] !== undefined);\n                // eslint-disable-next-line no-loop-func\n                applicableEdges.forEach((applicableEdge) => {\n                    for (let src in applicableEdge) {\n                        // yikes that looks so ugly! might fix if i regain will to live\n                        temp[transitionIndex[applicableEdge[src][1]]].push(applicableEdge[src][0]);\n                    }\n                });\n                tempGraph[name] = temp;\n            }\n        }\n        setGraph({ ...tempGraph });\n    }\n    \n    const handleAdd = () => {\n        let newNodes = [...nodes];\n        let newEdges = [...edges];\n        setSource(source.replace(/\\s+/g, ''));\n        setTransition(transition.replace(/\\s+/g, ''));\n        if (transition === \"\" || source === \"\" || target === \"\") {\n            setWarning(\"Invalid entry try again\");\n            handleShow();\n        } else {\n            let edge = {}\n            edge[source] = [target, transition];\n            let temp1 = {}\n            temp1[source] = false;\n            let temp2 = {}\n            temp2[target] = false;\n            if (startState.state === \"\") {\n                handleStartState(source);\n            }\n            if (!objectInList(newNodes, temp1)) {\n                newNodes.push(temp1);\n                if (source !== target && !objectInList(nodes, temp2)) {\n                    newNodes.push(temp2);\n                }\n                newEdges.push(edge);\n                setNodes([...newNodes]);\n                setEdges([...newEdges]);\n                handleUpdateGraph(newNodes, newEdges);\n                return;\n            } else if (!objectInList(newNodes, temp2)) {\n                newNodes.push(temp2);\n                newEdges.push(edge);\n                setNodes([...newNodes]);\n                setEdges([...newEdges]);\n                handleUpdateGraph(newNodes, newEdges);\n                return\n                \n            } else if (!objectInList(newEdges, edge)) {\n                newEdges.push(edge);\n                setEdges([...newEdges]);\n                handleUpdateGraph(newNodes, newEdges);\n                return;\n            }\n        }\n    }\n\n    return (\n        <div>\n        <div>\n            <h1>\n                    DFA Visualizer\n            </h1>\n            <h2 style={{color:\"red\", fontWeight:\"bold\"}}>\n                *Under Construction!*\n            </h2>\n        </div>\n        <div style={{\n            margin: \"25px\",\n            // display: \"flex\",\n            justifyContent: \"center\",\n        }}>\n            <Row>\n            <Col xs={7}>\n                <Row>\n                <div style={{\n                outline: \"3px dotted #1a7081\",\n                width: \"90%\",\n                margin: \"50px\",\n                padding: \"50px 50px 50px 50px\"\n            }}>\n                <Form>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"SourceNode\">\n                            <Form.Label> Source Node: </Form.Label> \n                            <Form.Control \n                                placeholder=\"Enter source node name\"\n                                onChange={(e) => setSource(e.target.value)}\n                                defaultValue={source} />\n                        </Form.Group>\n                        <Form.Group as={Col} xs={2} controlId=\"Transitions\">\n                            <Form.Label>Transition: </Form.Label>\n                            <Form.Control \n                                as=\"select\"\n                                onChange={(e) => setTransition(e.target.value)}\n                                defaultValue={transition}\n                            >\n                                <option>{\"0\"}</option>\n                                <option>{\"1\"}</option>\n                            </Form.Control>\n                        </Form.Group>  \n                        <Form.Group as={Col} controlId=\"TargetNode\">\n                            <Form.Label> Target Node: </Form.Label>    \n                            <Form.Control \n                                placeholder=\"Enter target node name\"\n                                onChange={(e) => setTarget(e.target.value)}\n                                defaultValue={target} />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row style={{\n                        justifyContent: \"right\",\n                        margin: \" 5px 5px 15px 5px\",\n                    }}>\n                        <Button variant=\"info\" onClick={() => handleAdd()}>Add</Button>{' '}\n                    </Form.Row>\n                </Form>\n            </div>\n                </Row>\n                <Row>\n                    <div style={{\n                        outline: \"3px dotted #1a7081\",\n                        width: \"90%\",\n                        margin: \"50px\",\n                        height: \"600px\",\n                        padding: \"50px 50px 50px 50px\",\n                    }}>\n                        <Sigma renderer=\"canvas\" graph={data}\n                            style=\n                            {{\n                                margin: \"0\",\n                                justifyContent: \"center\",\n                                display: \"flex\",\n                                position: \"static\",\n                                maxWidth: \"inherit\",\n                                height: \"inherit\",\n                            }}\n                            settings=\n                            {{\n                                fontStyle: \"bold\",\n                                scalingMode: \"inside\",\n                                drawEdges: true,\n                                drawEdgeLabels: true,\n                                clone: false,\n                                minArrowSize: 10,\n                                minNodeSize: 10,\n                                maxNodeSize: 40,\n                            }}\n                                    \n                        >\n                            <EdgeShapes default=\"curvedArrow\"/>\n                            <NodeShapes default=\"circle\" />\n                            <DragNodes />\n                        </Sigma>\n                    </div>\n                </Row>\n            </Col>\n            <Col>\n                <div style={{\n                    outline: \"3px dotted #1a7081\",\n                    width: \"90%\",\n                    margin: \"50px\",\n                    padding: \"50px 50px 50px 50px\",\n                    \n                    }}\n                >\n                    {/* <Row style ={{\n                        justifyContent: \"center\",\n                        display: \"flex\",\n                        margin: \"0px 5px 15px 5px\"\n                    }}>\n                        <Button variant=\"info\" id=\"UpdateGraph\" onClick={()=> handleGenerateData()}> Update Graph</Button>\n                    </Row>     */}\n                    <Row>    \n                        <Table striped>\n                            <thead>\n                                <tr>\n                                    <th>Source Node</th>\n                                    <th>0</th>\n                                    <th>1</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {Object.entries(graph).map((state) => (\n                                    <tr>\n                                        <td>{state[0]}</td>\n                                        <td>{state[1][0]?state[1][0].join(' ') : \" \"}</td>\n                                        <td>{state[1][1]?state[1][1].join(' '): \" \" }</td>\n                                        <td>\n                                            <Button variant=\"info\" id={`S${state[0]}`} onClick={() => handleStartState(state[0])}>\n                                                Start State\n                                            </Button>{' '}\n                                            <Button variant=\"info\" id={`A${state[0]}`} onClick={() => handleAcceptState(state[0])}>\n                                                Accept State\n                                            </Button>{' '}\n                                            {/* <Button variant=\"danger\" id={`R${state[0]}`} onClick={() => handleRemoveState(state[0])}>\n                                                Remove State\n                                            </Button>{' '} */}\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    </Row>\n                    <Row>\n                        <h4>Start State: {startState.state}</h4>\n                        \n                    </Row> \n                    <Row>\n                        <h4>Accept States: {acceptStates.join(\", \")}</h4>\n                    </Row>        \n                </div>\n                \n            </Col>\n            </Row>\n            </div>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                <Modal.Title>Warning!</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{warning}</Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n  \nexport default DFA;","/home/onariaginosa/LMU/Junior/Theory/Final/theory-final/src/components/GraphLoader.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"81","replacedBy":"87"},{"ruleId":"83","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":13},{"ruleId":"89","severity":1,"message":"93","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":11},{"ruleId":"89","severity":1,"message":"94","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":11},{"ruleId":"89","severity":1,"message":"95","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":17},{"ruleId":"89","severity":1,"message":"96","line":7,"column":8,"nodeType":"91","messageId":"92","endLine":7,"endColumn":13},{"ruleId":"81","replacedBy":"97"},{"ruleId":"83","replacedBy":"98"},{"ruleId":"89","severity":1,"message":"99","line":37,"column":9,"nodeType":"91","messageId":"92","endLine":37,"endColumn":14},{"ruleId":"89","severity":1,"message":"100","line":75,"column":11,"nodeType":"91","messageId":"92","endLine":75,"endColumn":29},{"ruleId":"89","severity":1,"message":"101","line":159,"column":11,"nodeType":"91","messageId":"92","endLine":159,"endColumn":28},{"ruleId":"89","severity":1,"message":"100","line":76,"column":11,"nodeType":"91","messageId":"92","endLine":76,"endColumn":29},{"ruleId":"89","severity":1,"message":"101","line":160,"column":11,"nodeType":"91","messageId":"92","endLine":160,"endColumn":28},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],["102"],["103"],"no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'InputForm' is defined but never used.","'Chart' is defined but never used.",["102"],["103"],"'take2' is assigned a value but never used.","'handleGenerateData' is assigned a value but never used.","'handleRemoveState' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]